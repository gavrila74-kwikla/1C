// Интеграция с API платиQR Сбер на языке 1С
// Получение токена авторизации и работа с API

#Область ИнтеграцияСПлатиQRСбер

// Пример 1: Базовая настройка для работы с API платиQR Сбер
&НаСервере 
Функция ПолучитьНастройкиAPI()
    
    // Настройки для песочницы (тестовая среда)
    НастройкиПесочница = Новый Структура;
    НастройкиПесочница.Вставить("БазовыйURL", "https://api.developer.sber.ru/prod/qr/order/v3");
    НастройкиПесочница.Вставить("АдресАвторизации", "https://api.sberbank.ru/prod/tokens/v2/oauth");
    НастройкиПесочница.Вставить("Scope", "https://api.sberbank.ru/qr/order.create https://api.sberbank.ru/qr/order.status");
    
    // Настройки для продуктивной среды
    НастройкиПрод = Новый Структура;
    НастройкиПрод.Вставить("БазовыйURL", "https://api.sberbank.ru/prod/qr/order/v3");
    НастройкиПрод.Вставить("АдресАвторизации", "https://api.sberbank.ru/prod/tokens/v2/oauth");
    НастройкиПрод.Вставить("Scope", "https://api.sberbank.ru/qr/order.create https://api.sberbank.ru/qr/order.status");
    
    // Возвращаем настройки в зависимости от режима
    Если ТестовыйРежим Тогда
        Возврат НастройкиПесочница;
    Иначе
        Возврат НастройкиПрод;
    КонецЕсли;
    
КонецФункции

// Пример 2: Получение токена авторизации
&НаСервере
Функция ПолучитьТокенАвторизации(ClientID, ClientSecret, Сертификат = Неопределено)
    
    Результат = Новый Структура("Успех, Токен, ОписаниеОшибки, ВремяИстечения");
    Результат.Успех = Ложь;
    
    Попытка
        
        НастройкиAPI = ПолучитьНастройкиAPI();
        
        // Создаем HTTP-соединение
        HTTPСоединение = Новый HTTPСоединение(
            "api.sberbank.ru",
            443,
            ,
            ,
            ,
            30,
            Новый ЗащищенноеСоединениеOpenSSL(Сертификат)
        );
        
        // Подготавливаем данные для получения токена
        ДанныеЗапроса = Новый Структура;
        ДанныеЗапроса.Вставить("grant_type", "client_credentials");
        ДанныеЗапроса.Вставить("scope", НастройкиAPI.Scope);
        
        // Преобразуем в JSON
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, ДанныеЗапроса);
        ТелоЗапроса = ЗаписьJSON.Закрыть();
        
        // Создаем HTTP-запрос
        HTTPЗапрос = Новый HTTPЗапрос("/prod/tokens/v2/oauth");
        HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
        
        // Устанавливаем заголовки
        HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
        HTTPЗапрос.Заголовки.Вставить("Accept", "application/json");
        HTTPЗапрос.Заголовки.Вставить("RqUID", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
        HTTPЗапрос.Заголовки.Вставить("X-IBM-Client-Id", ClientID);
        HTTPЗапрос.Заголовки.Вставить("X-IBM-Client-Secret", ClientSecret);
        
        // Выполняем запрос
        HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
        
        Если HTTPОтвет.КодСостояния = 200 Тогда
            
            // Парсим ответ
            ЧтениеJSON = Новый ЧтениеJSON;
            ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
            ОтветJSON = ПрочитатьJSON(ЧтениеJSON);
            ЧтениеJSON.Закрыть();
            
            // Извлекаем токен
            Если ОтветJSON.Свойство("access_token") Тогда
                Результат.Успех = Истина;
                Результат.Токен = ОтветJSON.access_token;
                
                // Вычисляем время истечения токена
                Если ОтветJSON.Свойство("expires_in") Тогда
                    Результат.ВремяИстечения = ТекущаяДатаСеанса() + ОтветJSON.expires_in;
                КонецЕсли;
                
            Иначе
                Результат.ОписаниеОшибки = "Токен не найден в ответе сервера";
            КонецЕсли;
            
        Иначе
            Результат.ОписаниеОшибки = "Ошибка HTTP: " + HTTPОтвет.КодСостояния + " - " + HTTPОтвет.ПолучитьТелоКакСтроку();
        КонецЕсли;
        
    Исключение
        Результат.ОписаниеОшибки = "Исключение при получении токена: " + ОписаниеОшибки();
    КонецПопытки;
    
    Возврат Результат;
    
КонецФункции

// Пример 3: Сохранение и получение токена из хранилища
&НаСервере
Процедура СохранитьТокенВХранилище(Токен, ВремяИстечения, ClientID)
    
    СтруктураТокена = Новый Структура;
    СтруктураТокена.Вставить("Токен", Токен);
    СтруктураТокена.Вставить("ВремяИстечения", ВремяИстечения);
    СтруктураТокена.Вставить("ВремяПолучения", ТекущаяДатаСеанса());
    СтруктураТокена.Вставить("ClientID", ClientID);
    
    // Сохраняем в регистр сведений или константу
    Константы.ТокенПлатиQRСбер.Установить(
        Новый ХранилищеЗначения(СтруктураТокена)
    );
    
КонецПроцедуры

&НаСервере
Функция ПолучитьТокенИзХранилища()
    
    Результат = Новый Структура("Успех, Токен, ОписаниеОшибки");
    Результат.Успех = Ложь;
    
    Попытка
        
        ХранилищеТокена = Константы.ТокенПлатиQRСбер.Получить();
        
        Если ТипЗнч(ХранилищеТокена) = Тип("ХранилищеЗначения") Тогда
            
            СтруктураТокена = ХранилищеТокена.Получить();
            
            Если ТипЗнч(СтруктураТокена) = Тип("Структура") 
                И СтруктураТокена.Свойство("Токен")
                И СтруктураТокена.Свойство("ВремяИстечения") Тогда
                
                // Проверяем, не истек ли токен
                Если СтруктураТокена.ВремяИстечения > ТекущаяДатаСеанса() Тогда
                    Результат.Успех = Истина;
                    Результат.Токен = СтруктураТокена.Токен;
                Иначе
                    Результат.ОписаниеОшибки = "Токен истек";
                КонецЕсли;
                
            Иначе
                Результат.ОписаниеОшибки = "Неверная структура токена";
            КонецЕсли;
            
        Иначе
            Результат.ОписаниеОшибки = "Токен не найден в хранилище";
        КонецЕсли;
        
    Исключение
        Результат.ОписаниеОшибки = "Ошибка при получении токена из хранилища: " + ОписаниеОшибки();
    КонецПопытки;
    
    Возврат Результат;
    
КонецФункции

// Пример 4: Универсальная функция получения актуального токена
&НаСервере
Функция ПолучитьАктуальныйТокен(ClientID, ClientSecret, Сертификат = Неопределено)
    
    // Сначала пытаемся получить токен из хранилища
    РезультатИзХранилища = ПолучитьТокенИзХранилища();
    
    Если РезультатИзХранилища.Успех Тогда
        Возврат РезультатИзХранилища;
    КонецЕсли;
    
    // Если токена нет или он истек, получаем новый
    РезультатНовыйТокен = ПолучитьТокенАвторизации(ClientID, ClientSecret, Сертификат);
    
    Если РезультатНовыйТокен.Успех Тогда
        // Сохраняем новый токен
        СохранитьТокенВХранилище(
            РезультатНовыйТокен.Токен,
            РезультатНовыйТокен.ВремяИстечения,
            ClientID
        );
    КонецЕсли;
    
    Возврат РезультатНовыйТокен;
    
КонецФункции

// Пример 5: Создание QR-кода для оплаты
&НаСервере
Функция СоздатьQRКодДляОплаты(СуммаОплаты, НомерЗаказа, ОписаниеЗаказа, ClientID, ClientSecret)
    
    Результат = Новый Структура("Успех, QRCode, OrderID, ОписаниеОшибки");
    Результат.Успех = Ложь;
    
    Попытка
        
        // Получаем актуальный токен
        РезультатТокена = ПолучитьАктуальныйТокен(ClientID, ClientSecret);
        
        Если НЕ РезультатТокена.Успех Тогда
            Результат.ОписаниеОшибки = "Не удалось получить токен: " + РезультатТокена.ОписаниеОшибки;
            Возврат Результат;
        КонецЕсли;
        
        НастройкиAPI = ПолучитьНастройкиAPI();
        
        // Создаем HTTP-соединение
        HTTPСоединение = Новый HTTPСоединение(
            "api.sberbank.ru",
            443,
            ,
            ,
            ,
            30,
            Новый ЗащищенноеСоединениеOpenSSL()
        );
        
        // Подготавливаем данные заказа
        ДанныеЗаказа = Новый Структура;
        ДанныеЗаказа.Вставить("rq_uid", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
        ДанныеЗаказа.Вставить("rq_tm", Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-ddTHH:mm:ss.fffZ"));
        ДанныеЗаказа.Вставить("member_id", ClientID);
        ДанныеЗаказа.Вставить("order_number", НомерЗаказа);
        ДанныеЗаказа.Вставить("order_create_date", Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-ddTHH:mm:ss.fffZ"));
        ДанныеЗаказа.Вставить("order_sum", СуммаОплаты * 100); // В копейках
        ДанныеЗаказа.Вставить("currency", "643"); // RUB
        ДанныеЗаказа.Вставить("description", ОписаниеЗаказа);
        
        // Преобразуем в JSON
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, ДанныеЗаказа);
        ТелоЗапроса = ЗаписьJSON.Закрыть();
        
        // Создаем HTTP-запрос
        HTTPЗапрос = Новый HTTPЗапрос("/prod/qr/order/v3/creation");
        HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
        
        // Устанавливаем заголовки
        HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
        HTTPЗапрос.Заголовки.Вставить("Accept", "application/json");
        HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + РезультатТокена.Токен);
        HTTPЗапрос.Заголовки.Вставить("X-IBM-Client-Id", ClientID);
        
        // Выполняем запрос
        HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
        
        Если HTTPОтвет.КодСостояния = 200 Тогда
            
            // Парсим ответ
            ЧтениеJSON = Новый ЧтениеJSON;
            ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
            ОтветJSON = ПрочитатьJSON(ЧтениеJSON);
            ЧтениеJSON.Закрыть();
            
            Если ОтветJSON.Свойство("order_id") И ОтветJSON.Свойство("order_form_url") Тогда
                Результат.Успех = Истина;
                Результат.OrderID = ОтветJSON.order_id;
                Результат.QRCode = ОтветJSON.order_form_url;
            Иначе
                Результат.ОписаниеОшибки = "Неверный формат ответа сервера";
            КонецЕсли;
            
        Иначе
            Результат.ОписаниеОшибки = "Ошибка HTTP: " + HTTPОтвет.КодСостояния + " - " + HTTPОтвет.ПолучитьТелоКакСтроку();
        КонецЕсли;
        
    Исключение
        Результат.ОписаниеОшибки = "Исключение при создании QR-кода: " + ОписаниеОшибки();
    КонецПопытки;
    
    Возврат Результат;
    
КонецФункции

// Пример 6: Проверка статуса заказа
&НаСервере
Функция ПроверитьСтатусЗаказа(OrderID, ClientID, ClientSecret)
    
    Результат = Новый Структура("Успех, Статус, СуммаОплаты, ОписаниеОшибки");
    Результат.Успех = Ложь;
    
    Попытка
        
        // Получаем актуальный токен
        РезультатТокена = ПолучитьАктуальныйТокен(ClientID, ClientSecret);
        
        Если НЕ РезультатТокена.Успех Тогда
            Результат.ОписаниеОшибки = "Не удалось получить токен: " + РезультатТокена.ОписаниеОшибки;
            Возврат Результат;
        КонецЕсли;
        
        // Создаем HTTP-соединение
        HTTPСоединение = Новый HTTPСоединение(
            "api.sberbank.ru",
            443,
            ,
            ,
            ,
            30,
            Новый ЗащищенноеСоединениеOpenSSL()
        );
        
        // Подготавливаем данные запроса
        ДанныеЗапроса = Новый Структура;
        ДанныеЗапроса.Вставить("rq_uid", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
        ДанныеЗапроса.Вставить("rq_tm", Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-ddTHH:mm:ss.fffZ"));
        ДанныеЗапроса.Вставить("order_id", OrderID);
        
        // Преобразуем в JSON
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, ДанныеЗапроса);
        ТелоЗапроса = ЗаписьJSON.Закрыть();
        
        // Создаем HTTP-запрос
        HTTPЗапрос = Новый HTTPЗапрос("/prod/qr/order/v3/status");
        HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
        
        // Устанавливаем заголовки
        HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
        HTTPЗапрос.Заголовки.Вставить("Accept", "application/json");
        HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + РезультатТокена.Токен);
        HTTPЗапрос.Заголовки.Вставить("X-IBM-Client-Id", ClientID);
        
        // Выполняем запрос
        HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
        
        Если HTTPОтвет.КодСостояния = 200 Тогда
            
            // Парсим ответ
            ЧтениеJSON = Новый ЧтениеJSON;
            ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
            ОтветJSON = ПрочитатьJSON(ЧтениеJSON);
            ЧтениеJSON.Закрыть();
            
            Если ОтветJSON.Свойство("order_state") Тогда
                Результат.Успех = Истина;
                Результат.Статус = ОтветJSON.order_state;
                
                Если ОтветJSON.Свойство("order_sum") Тогда
                    Результат.СуммаОплаты = ОтветJSON.order_sum / 100; // Из копеек в рубли
                КонецЕсли;
                
            Иначе
                Результат.ОписаниеОшибки = "Статус заказа не найден в ответе";
            КонецЕсли;
            
        Иначе
            Результат.ОписаниеОшибки = "Ошибка HTTP: " + HTTPОтвет.КодСостояния + " - " + HTTPОтвет.ПолучитьТелоКакСтроку();
        КонецЕсли;
        
    Исключение
        Результат.ОписаниеОшибки = "Исключение при проверке статуса: " + ОписаниеОшибки();
    КонецПопытки;
    
    Возврат Результат;
    
КонецФункции

#КонецОбласти

#Область ВспомогательныеФункции

// Функция для логирования запросов к API
&НаСервере
Процедура ЗаписатьЛогAPIЗапроса(ТипОперации, Запрос, Ответ, Успех)
    
    Попытка
        
        НоваяЗапись = РегистрыСведений.ЛогAPIПлатиQR.СоздатьМенеджерЗаписи();
        НоваяЗапись.ДатаВремя = ТекущаяДатаСеанса();
        НоваяЗапись.ТипОперации = ТипОперации;
        НоваяЗапись.ТекстЗапроса = Запрос;
        НоваяЗапись.ТекстОтвета = Ответ;
        НоваяЗапись.Успех = Успех;
        НоваяЗапись.Записать();
        
    Исключение
        // Игнорируем ошибки логирования
    КонецПопытки;
    
КонецПроцедуры

// Функция для валидации настроек
&НаСервере
Функция ПроверитьНастройкиAPI(ClientID, ClientSecret)
    
    Результат = Новый Структура("Успех, ОписаниеОшибки");
    Результат.Успех = Истина;
    
    Если ПустаяСтрока(ClientID) Тогда
        Результат.Успех = Ложь;
        Результат.ОписаниеОшибки = "Не указан Client ID";
        Возврат Результат;
    КонецЕсли;
    
    Если ПустаяСтрока(ClientSecret) Тогда
        Результат.Успех = Ложь;
        Результат.ОписаниеОшибки = "Не указан Client Secret";
        Возврат Результат;
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

#КонецОбласти

// Примеры использования:
//
// 1. Получение токена:
// ClientID = "ваш_client_id";
// ClientSecret = "ваш_client_secret";
// РезультатТокена = ПолучитьТокенАвторизации(ClientID, ClientSecret);
//
// 2. Создание QR-кода:
// РезультатQR = СоздатьQRКодДляОплаты(1000, "ORDER-123", "Оплата заказа", ClientID, ClientSecret);
//
// 3. Проверка статуса:
// РезультатСтатуса = ПроверитьСтатусЗаказа("order_id_12345", ClientID, ClientSecret);
//
// Возможные статусы заказа:
// - CREATED - заказ создан
// - PAID - заказ оплачен
// - DECLINED - отклонен
// - EXPIRED - истек срок действия
)